// This file is auto-generated by @hey-api/openapi-ts

export type AuthResponse = {
    accessToken?: string;
    user?: UserDTO;
};

export type BlogDTO = {
    id?: string;
    title?: string;
    description?: string;
    author?: UserSummaryDTO;
};

export type BlogsResponse = {
    content?: Array<BlogDTO>;
    pageNo?: number;
    pageSize?: number;
    totalElements?: number;
    totalPages?: number;
    last?: boolean;
};

export type ImageDTO = {
    id?: string;
    name?: string;
    type?: string;
    createdAt?: Date;
};

export type LoginRequest = {
    username: string;
    password: string;
};

export type PostDTO = {
    id?: number;
    title?: string;
    content?: string;
    brief?: string;
    coverFileId?: string;
    createdAt?: Date;
    author?: UserSummaryDTO;
    tags?: Array<TagDTO>;
};

export type PostsResponse = {
    content?: Array<PostSummaryDTO>;
    pageNo?: number;
    pageSize?: number;
    totalElements?: number;
    totalPages?: number;
    last?: boolean;
};

export type PostSummaryDTO = {
    id?: number;
    title?: string;
    brief?: string;
    coverFileId?: string;
    createdAt?: Date;
    author?: UserSummaryDTO;
    tags?: Array<TagDTO>;
};

export type RoleDTO = {
    name?: string;
};

export type SignUpRequest = {
    username: string;
    password: string;
    name: string;
    email?: string;
};

export type TagDTO = {
    id?: string;
    text?: string;
};

export type UpdateBlogRequest = {
    title: string;
    description: string;
};

export type UpdatePostRequest = {
    title?: string;
    content?: string;
    brief?: string;
    coverFileId?: string;
    tags?: Array<TagDTO>;
};

export type UpdateUserRequest = {
    name?: string;
    username?: string;
    avatarFileId?: string;
};

export type UserDTO = {
    id?: number;
    username?: string;
    name?: string;
    email?: string;
    blogId?: string;
    avatarFileId?: string;
    roles?: Array<RoleDTO>;
};

export type UserSummaryDTO = {
    id?: number;
    name?: string;
    username?: string;
    blogId?: string;
    avatarFileId?: string;
};

export type GetPostByIdData = {
    path: {
        id: number;
    };
};

export type GetPostByIdResponse = (PostDTO);

export type GetPostByIdError = unknown;

export type UpdatePostData = {
    body: UpdatePostRequest;
    path: {
        id: number;
    };
};

export type UpdatePostResponse = (PostDTO);

export type UpdatePostError = unknown;

export type DeletePostData = {
    path: {
        id: number;
    };
};

export type DeletePostResponse = (unknown);

export type DeletePostError = unknown;

export type GetBlogByIdData = {
    path: {
        id: string;
    };
};

export type GetBlogByIdResponse = (BlogDTO);

export type GetBlogByIdError = unknown;

export type UpdateBlogData = {
    body: UpdateBlogRequest;
    path: {
        id: string;
    };
};

export type UpdateBlogResponse = (BlogDTO);

export type UpdateBlogError = unknown;

export type DeleteBlogData = {
    path: {
        id: string;
    };
};

export type DeleteBlogResponse = (unknown);

export type DeleteBlogError = unknown;

export type GetCurrentUserResponse = (UserDTO);

export type GetCurrentUserError = unknown;

export type UpdateCurrentUserData = {
    body: UpdateUserRequest;
};

export type UpdateCurrentUserResponse = (UserDTO);

export type UpdateCurrentUserError = unknown;

export type DeleteCurrentUserResponse = (string);

export type DeleteCurrentUserError = unknown;

export type SignUpData = {
    body: SignUpRequest;
};

export type SignUpResponse = (AuthResponse);

export type SignUpError = unknown;

export type LoginData = {
    body: LoginRequest;
};

export type LoginResponse = (AuthResponse);

export type LoginError = unknown;

export type GetAllPostsData = {
    query?: {
        page?: number;
        size?: number;
    };
};

export type GetAllPostsResponse = (PostsResponse);

export type GetAllPostsError = unknown;

export type CreatePostForCurrentUserData = {
    body: UpdatePostRequest;
};

export type CreatePostForCurrentUserResponse = (PostDTO);

export type CreatePostForCurrentUserError = unknown;

export type UploadImageData = {
    body?: {
        file: (Blob | File);
    };
};

export type UploadImageResponse = (ImageDTO);

export type UploadImageError = unknown;

export type CreateBlogForUserData = {
    body: BlogDTO;
    path: {
        userId: number;
    };
};

export type CreateBlogForUserResponse = (BlogDTO);

export type CreateBlogForUserError = unknown;

export type GetUsersResponse = (Array<UserDTO>);

export type GetUsersError = unknown;

export type GetUserData = {
    path: {
        username: string;
    };
};

export type GetUserResponse = (UserSummaryDTO);

export type GetUserError = unknown;

export type DeleteUserData = {
    path: {
        username: string;
    };
};

export type DeleteUserResponse = (UserDTO);

export type DeleteUserError = unknown;

export type GetPostsByTagData = {
    query: {
        page?: number;
        size?: number;
        tag: string;
    };
};

export type GetPostsByTagResponse = (PostsResponse);

export type GetPostsByTagError = unknown;

export type GetImageData = {
    path: {
        id: string;
    };
};

export type GetImageResponse = (string);

export type GetImageError = unknown;

export type DeleteImageData = {
    path: {
        id: string;
    };
};

export type DeleteImageResponse = (unknown);

export type DeleteImageError = unknown;

export type GetAllBlogsData = {
    query?: {
        page?: number;
        size?: number;
    };
};

export type GetAllBlogsResponse = (BlogsResponse);

export type GetAllBlogsError = unknown;

export type GetBlogPostsData = {
    path: {
        id: string;
    };
    query?: {
        pageNo?: number;
        pageSize?: number;
    };
};

export type GetBlogPostsResponse = (PostsResponse);

export type GetBlogPostsError = unknown;

export type GetBlogForCurrentUserResponse = (BlogDTO);

export type GetBlogForCurrentUserError = unknown;

export type GetPostByIdResponseTransformer = (data: any) => Promise<GetPostByIdResponse>;

export type PostDTOModelResponseTransformer = (data: any) => PostDTO;

export const PostDTOModelResponseTransformer: PostDTOModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

export const GetPostByIdResponseTransformer: GetPostByIdResponseTransformer = async (data) => {
    PostDTOModelResponseTransformer(data);
    return data;
};

export type UpdatePostResponseTransformer = (data: any) => Promise<UpdatePostResponse>;

export const UpdatePostResponseTransformer: UpdatePostResponseTransformer = async (data) => {
    PostDTOModelResponseTransformer(data);
    return data;
};

export type GetAllPostsResponseTransformer = (data: any) => Promise<GetAllPostsResponse>;

export type PostsResponseModelResponseTransformer = (data: any) => PostsResponse;

export type PostSummaryDTOModelResponseTransformer = (data: any) => PostSummaryDTO;

export const PostSummaryDTOModelResponseTransformer: PostSummaryDTOModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

export const PostsResponseModelResponseTransformer: PostsResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.content)) {
        data.content.forEach(PostSummaryDTOModelResponseTransformer);
    }
    return data;
};

export const GetAllPostsResponseTransformer: GetAllPostsResponseTransformer = async (data) => {
    PostsResponseModelResponseTransformer(data);
    return data;
};

export type CreatePostForCurrentUserResponseTransformer = (data: any) => Promise<CreatePostForCurrentUserResponse>;

export const CreatePostForCurrentUserResponseTransformer: CreatePostForCurrentUserResponseTransformer = async (data) => {
    PostDTOModelResponseTransformer(data);
    return data;
};

export type UploadImageResponseTransformer = (data: any) => Promise<UploadImageResponse>;

export type ImageDTOModelResponseTransformer = (data: any) => ImageDTO;

export const ImageDTOModelResponseTransformer: ImageDTOModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

export const UploadImageResponseTransformer: UploadImageResponseTransformer = async (data) => {
    ImageDTOModelResponseTransformer(data);
    return data;
};

export type GetPostsByTagResponseTransformer = (data: any) => Promise<GetPostsByTagResponse>;

export const GetPostsByTagResponseTransformer: GetPostsByTagResponseTransformer = async (data) => {
    PostsResponseModelResponseTransformer(data);
    return data;
};

export type GetBlogPostsResponseTransformer = (data: any) => Promise<GetBlogPostsResponse>;

export const GetBlogPostsResponseTransformer: GetBlogPostsResponseTransformer = async (data) => {
    PostsResponseModelResponseTransformer(data);
    return data;
};