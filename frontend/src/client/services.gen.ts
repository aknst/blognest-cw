// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-axios';
import { type GetPostByIdData, type GetPostByIdError, type GetPostByIdResponse, type UpdatePostData, type UpdatePostError, type UpdatePostResponse, type DeletePostData, type DeletePostError, type DeletePostResponse, type GetBlogByIdData, type GetBlogByIdError, type GetBlogByIdResponse, type UpdateBlogData, type UpdateBlogError, type UpdateBlogResponse, type DeleteBlogData, type DeleteBlogError, type DeleteBlogResponse, type GetCurrentUserError, type GetCurrentUserResponse, type UpdateCurrentUserData, type UpdateCurrentUserError, type UpdateCurrentUserResponse, type DeleteCurrentUserError, type DeleteCurrentUserResponse, type SignUpData, type SignUpError, type SignUpResponse, type LoginData, type LoginError, type LoginResponse, type GetAllPostsData, type GetAllPostsError, type GetAllPostsResponse, type CreatePostForCurrentUserData, type CreatePostForCurrentUserError, type CreatePostForCurrentUserResponse, type UploadImageData, type UploadImageError, type UploadImageResponse, type CreateBlogForUserData, type CreateBlogForUserError, type CreateBlogForUserResponse, type GetUsersError, type GetUsersResponse, type GetUserData, type GetUserError, type GetUserResponse, type DeleteUserData, type DeleteUserError, type DeleteUserResponse, type GetPostsByTagData, type GetPostsByTagError, type GetPostsByTagResponse, type GetImageData, type GetImageError, type GetImageResponse, type DeleteImageData, type DeleteImageError, type DeleteImageResponse, type GetAllBlogsData, type GetAllBlogsError, type GetAllBlogsResponse, type GetBlogPostsData, type GetBlogPostsError, type GetBlogPostsResponse, type GetBlogForCurrentUserError, type GetBlogForCurrentUserResponse, GetPostByIdResponseTransformer, UpdatePostResponseTransformer, GetAllPostsResponseTransformer, CreatePostForCurrentUserResponseTransformer, UploadImageResponseTransformer, GetPostsByTagResponseTransformer, GetBlogPostsResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

export const getPostById = <ThrowOnError extends boolean = false>(options: Options<GetPostByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPostByIdResponse, GetPostByIdError, ThrowOnError>({
        ...options,
        url: '/api/posts/{id}',
        responseTransformer: GetPostByIdResponseTransformer
    });
};

export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePostResponse, UpdatePostError, ThrowOnError>({
        ...options,
        url: '/api/posts/{id}',
        responseTransformer: UpdatePostResponseTransformer
    });
};

export const deletePost = <ThrowOnError extends boolean = false>(options: Options<DeletePostData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePostResponse, DeletePostError, ThrowOnError>({
        ...options,
        url: '/api/posts/{id}'
    });
};

export const getBlogById = <ThrowOnError extends boolean = false>(options: Options<GetBlogByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBlogByIdResponse, GetBlogByIdError, ThrowOnError>({
        ...options,
        url: '/api/blogs/{id}'
    });
};

export const updateBlog = <ThrowOnError extends boolean = false>(options: Options<UpdateBlogData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateBlogResponse, UpdateBlogError, ThrowOnError>({
        ...options,
        url: '/api/blogs/{id}'
    });
};

export const deleteBlog = <ThrowOnError extends boolean = false>(options: Options<DeleteBlogData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteBlogResponse, DeleteBlogError, ThrowOnError>({
        ...options,
        url: '/api/blogs/{id}'
    });
};

export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/account/me'
    });
};

export const updateCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateCurrentUserResponse, UpdateCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/account/me'
    });
};

export const deleteCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCurrentUserResponse, DeleteCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/account/me'
    });
};

export const signUp = <ThrowOnError extends boolean = false>(options: Options<SignUpData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignUpResponse, SignUpError, ThrowOnError>({
        ...options,
        url: '/auth/signup'
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
        ...options,
        url: '/auth/authenticate'
    });
};

export const getAllPosts = <ThrowOnError extends boolean = false>(options?: Options<GetAllPostsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllPostsResponse, GetAllPostsError, ThrowOnError>({
        ...options,
        url: '/api/posts',
        responseTransformer: GetAllPostsResponseTransformer
    });
};

export const createPostForCurrentUser = <ThrowOnError extends boolean = false>(options: Options<CreatePostForCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePostForCurrentUserResponse, CreatePostForCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/posts',
        responseTransformer: CreatePostForCurrentUserResponseTransformer
    });
};

export const uploadImage = <ThrowOnError extends boolean = false>(options?: Options<UploadImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadImageResponse, UploadImageError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/api/images',
        responseTransformer: UploadImageResponseTransformer
    });
};

export const createBlogForUser = <ThrowOnError extends boolean = false>(options: Options<CreateBlogForUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateBlogForUserResponse, CreateBlogForUserError, ThrowOnError>({
        ...options,
        url: '/api/blogs/user/{userId}'
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        ...options,
        url: '/api/users'
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
        ...options,
        url: '/api/users/{username}'
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        ...options,
        url: '/api/users/{username}'
    });
};

export const getPostsByTag = <ThrowOnError extends boolean = false>(options: Options<GetPostsByTagData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPostsByTagResponse, GetPostsByTagError, ThrowOnError>({
        ...options,
        url: '/api/posts/by-tag',
        responseTransformer: GetPostsByTagResponseTransformer
    });
};

export const getImage = <ThrowOnError extends boolean = false>(options: Options<GetImageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetImageResponse, GetImageError, ThrowOnError>({
        ...options,
        url: '/api/images/{id}'
    });
};

export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteImageResponse, DeleteImageError, ThrowOnError>({
        ...options,
        url: '/api/images/{id}'
    });
};

export const getAllBlogs = <ThrowOnError extends boolean = false>(options?: Options<GetAllBlogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllBlogsResponse, GetAllBlogsError, ThrowOnError>({
        ...options,
        url: '/api/blogs'
    });
};

export const getBlogPosts = <ThrowOnError extends boolean = false>(options: Options<GetBlogPostsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBlogPostsResponse, GetBlogPostsError, ThrowOnError>({
        ...options,
        url: '/api/blogs/{id}/posts',
        responseTransformer: GetBlogPostsResponseTransformer
    });
};

export const getBlogForCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBlogForCurrentUserResponse, GetBlogForCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/blogs/'
    });
};